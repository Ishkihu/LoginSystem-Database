/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package projPackage;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.*;
import javax.swing.JOptionPane;
import java.lang.*;

/**
 *
 * @author John Victor Esquejo
 */
public class Dashboard extends javax.swing.JFrame {

        boolean search=true;
        Connection con;
        PreparedStatement pst;
        ResultSet rs;
    
    /**
     * Creates new form Dashboard
     */
    public Dashboard() {
        initComponents();
            Connect();
        
        textUsername.setText("");
        textUsername.setEnabled(false);
        textFName.setText("");
        textFName.setEnabled(false);
        textLName.setText("");
        textLName.setEnabled(false);
        textAddress.setText("");
        textAddress.setEnabled(false);
        textContactNumber.setText("");
        textContactNumber.setEnabled(false);
        textEmailAddress.setText("");
        textEmailAddress.setEnabled(false);
        textPassword.setText("");
        textPassword.setEnabled(false);
        textConfirmPassword.setText("");
        textConfirmPassword.setEnabled(false);
        
        updateButton.setEnabled(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        searchId = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        textFName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        textLName = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        textUsername = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        textAddress = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        textContactNumber = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        textPassword = new javax.swing.JPasswordField();
        jLabel12 = new javax.swing.JLabel();
        textEmailAddress = new javax.swing.JTextField();
        textConfirmPassword = new javax.swing.JPasswordField();
        jLabel37 = new javax.swing.JLabel();
        signOut = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel7 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        hotLatte = new javax.swing.JButton();
        mochaFrappe = new javax.swing.JButton();
        blackCoffee = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        chocoCake = new javax.swing.JButton();

        jMenu1.setText("jMenu1");

        jMenu2.setText("jMenu2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 51, 0));

        jLabel6.setFont(new java.awt.Font("Yu Gothic", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("DASHBOARD");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projPackage/sar.png"))); // NOI18N
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 204, 153), 3));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(101, 101, 101))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jTabbedPane1.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N

        jPanel3.setBackground(new java.awt.Color(255, 204, 153));

        jLabel1.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 51, 0));
        jLabel1.setText("ID");

        jLabel3.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 51, 0));
        jLabel3.setText("Username");

        jLabel4.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 51, 0));
        jLabel4.setText("First Name");

        jLabel5.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 51, 0));
        jLabel5.setText("Last Name");

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projPackage/avatar.png"))); // NOI18N
        jLabel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 51, 0), 2));

        jLabel8.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 51, 0));
        jLabel8.setText("ACCOUNT INFORMATION");

        jLabel9.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(102, 51, 0));
        jLabel9.setText("Address");

        jLabel10.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(102, 51, 0));
        jLabel10.setText("Contact No.");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        updateButton.setBackground(new java.awt.Color(0, 153, 0));
        updateButton.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        updateButton.setForeground(new java.awt.Color(255, 255, 255));
        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(153, 0, 0));
        deleteButton.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteButton.setText("Delete Account");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(102, 51, 0));
        jLabel11.setText("Password");

        textPassword.setText("jPasswordField1");

        jLabel12.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(102, 51, 0));
        jLabel12.setText("Email Address");

        textConfirmPassword.setText("jPasswordField1");

        jLabel37.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(102, 51, 0));
        jLabel37.setText("Confirm Password");

        signOut.setBackground(new java.awt.Color(255, 102, 0));
        signOut.setForeground(new java.awt.Color(255, 255, 255));
        signOut.setText("Sign Out");
        signOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel9)
                                    .addComponent(textFName, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(34, 34, 34)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(textLName, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(textAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(textPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(textContactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(33, 33, 33)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(textEmailAddress)))
                            .addComponent(updateButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel37)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(signOut))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(textConfirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deleteButton))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel7)
                        .addGap(31, 31, 31)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(textUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(searchId, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchButton)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchButton))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(updateButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel7))
                .addGap(51, 51, 51)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textLName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textContactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textEmailAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel37)
                    .addComponent(signOut))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textConfirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton))
                .addContainerGap(263, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Profile", jPanel3);

        jPanel7.setBackground(new java.awt.Color(255, 204, 153));

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projPackage/latte12.png"))); // NOI18N

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projPackage/hotCoffee.png"))); // NOI18N

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projPackage/icedCoffee.png"))); // NOI18N

        hotLatte.setBackground(new java.awt.Color(255, 102, 0));
        hotLatte.setForeground(new java.awt.Color(255, 255, 255));
        hotLatte.setText("Order");
        hotLatte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hotLatteActionPerformed(evt);
            }
        });

        mochaFrappe.setBackground(new java.awt.Color(255, 102, 0));
        mochaFrappe.setForeground(new java.awt.Color(255, 255, 255));
        mochaFrappe.setText("Order");
        mochaFrappe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mochaFrappeActionPerformed(evt);
            }
        });

        blackCoffee.setBackground(new java.awt.Color(255, 102, 0));
        blackCoffee.setForeground(new java.awt.Color(255, 255, 255));
        blackCoffee.setText("Order");
        blackCoffee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackCoffeeActionPerformed(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Roboto Medium", 2, 12)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(102, 51, 0));
        jLabel22.setText("Hot Latte");

        jLabel23.setFont(new java.awt.Font("Roboto Medium", 2, 12)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(102, 51, 0));
        jLabel23.setText("Mocha Frappuccino");

        jLabel24.setFont(new java.awt.Font("Roboto Medium", 2, 12)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(102, 51, 0));
        jLabel24.setText("Black Coffee");

        jLabel21.setFont(new java.awt.Font("Roboto Light", 2, 12)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(102, 51, 0));
        jLabel21.setText("Ingredients: Expresso, Milk");

        jLabel25.setFont(new java.awt.Font("Roboto Medium", 2, 12)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(0, 102, 0));
        jLabel25.setText("Price: 2.99$ ");

        jLabel26.setFont(new java.awt.Font("Roboto Light", 2, 12)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(102, 51, 0));
        jLabel26.setText("Ingredients: Espresso, Milk ");

        jLabel27.setFont(new java.awt.Font("Roboto Medium", 2, 12)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(0, 102, 0));
        jLabel27.setText("Price: 4.99$");

        jLabel28.setFont(new java.awt.Font("Roboto Medium", 2, 12)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(0, 102, 0));
        jLabel28.setText("Price: 1$");

        jLabel30.setFont(new java.awt.Font("Roboto Medium", 2, 12)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(102, 51, 0));
        jLabel30.setText(" Chocolate Cake Slice");

        jLabel32.setFont(new java.awt.Font("Roboto Light", 2, 12)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(102, 51, 0));
        jLabel32.setText("Ingredients: Ground Coffee Beans, Hot Water ");

        jLabel33.setFont(new java.awt.Font("Roboto Light", 2, 12)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(102, 51, 0));
        jLabel33.setText("Optional Additives: Sweetener, Milk");

        jLabel34.setFont(new java.awt.Font("Roboto Light", 2, 12)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(102, 51, 0));
        jLabel34.setText("Whipped Cream, Chocolate Syrup & Ice");

        jLabel35.setBackground(new java.awt.Color(102, 51, 0));
        jLabel35.setFont(new java.awt.Font("Roboto Light", 2, 12)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(102, 51, 0));
        jLabel35.setText("Ingredients: Chocolate Cake Mix, Sugar");

        jLabel36.setFont(new java.awt.Font("Roboto Light", 2, 12)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(102, 51, 0));
        jLabel36.setText("Whipping Cream, Ganashe");

        jLabel29.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projPackage/Cake.png"))); // NOI18N

        jLabel31.setForeground(new java.awt.Color(0, 102, 0));
        jLabel31.setText("Price: 5.99$");

        chocoCake.setBackground(new java.awt.Color(255, 102, 0));
        chocoCake.setForeground(new java.awt.Color(255, 255, 255));
        chocoCake.setText("Order");
        chocoCake.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chocoCakeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addComponent(jLabel20)
                    .addComponent(jLabel19)
                    .addComponent(jLabel29))
                .addGap(40, 40, 40)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel24)
                            .addComponent(jLabel23)
                            .addComponent(jLabel32)
                            .addComponent(jLabel33)
                            .addComponent(jLabel22)
                            .addComponent(jLabel21)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel25)
                                .addGap(13, 13, 13)
                                .addComponent(hotLatte))
                            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel34, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel26, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap(576, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel31)
                                .addGap(18, 18, 18)
                                .addComponent(chocoCake))
                            .addComponent(jLabel30)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel27)
                                    .addComponent(jLabel28))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(blackCoffee)
                                    .addComponent(mochaFrappe)))
                            .addComponent(jLabel35)
                            .addComponent(jLabel36))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hotLatte)
                            .addComponent(jLabel25)))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel18)))
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jLabel20))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(jLabel23)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel34)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mochaFrappe)
                            .addComponent(jLabel27))))
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jLabel19))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(jLabel24)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel32)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel33)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(blackCoffee)
                            .addComponent(jLabel28))))
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel30)
                        .addGap(27, 27, 27)
                        .addComponent(jLabel35)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel36)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel31)
                            .addComponent(chocoCake)))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel29)))
                .addContainerGap(275, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel7);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 656, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 803, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Coffee Book", jPanel4);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 846, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 30, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chocoCakeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chocoCakeActionPerformed
        // TODO add your handling code here:

        int answer;
        answer = JOptionPane.showConfirmDialog(null, "Chocolate Cake Slice costs 5.99$ \n\n\t\t\t\t\t\tConfirm?", "ANIMO Barista", JOptionPane.YES_NO_OPTION);
        if (answer == JOptionPane.YES_OPTION) {
            // User confirmed the order, show address and payment options
            String address = JOptionPane.showInputDialog(null, "Enter your address:");

            // Check if the user entered an address
            if (address != null && !address.isEmpty()) {
                // User entered an address, now show payment options
                String[] paymentOptions = {"Cash on Delivery", "GCash"};
                String selectedPayment = (String) JOptionPane.showInputDialog(null, "Choose payment method:", "Payment Options", JOptionPane.QUESTION_MESSAGE, null, paymentOptions, paymentOptions[0]);

                // Process the selected payment method
                if (selectedPayment != null) {
                    if ("GCash".equals(selectedPayment)) {
                        // For GCash payment, ask for contact number and amount
                        String contactNumber = JOptionPane.showInputDialog(null, "Enter your contact number:");

                        // Check if the user pressed cancel
                        if (contactNumber == null) {
                            JOptionPane.showMessageDialog(null, "Order canceled.");
                            return;  // Exit the method or return to the main loop
                        }

                        double productPrice = 5.99; // Set product price
                        double amountToPay = 0;

                        while (true) {
                            try {
                                amountToPay = Double.parseDouble(JOptionPane.showInputDialog(null, "Enter the amount to pay:"));

                                // Check if the entered amount is sufficient
                                if (amountToPay == productPrice) {
                                    // Display the paid amount in the final output
                                    JOptionPane.showMessageDialog(null, "Order confirmed!\nAddress: " + address + "\nPayment Method: " + selectedPayment + "\nContact Number: " + contactNumber + "\nAmount Paid: $" + amountToPay);
                                    break;
                                } else if (amountToPay > productPrice) {
                                    JOptionPane.showMessageDialog(null, "Amount entered exceeds " + productPrice + "$");
                                } else {
                                    // Prompt that the amount is not enough
                                    JOptionPane.showMessageDialog(null, "Amount entered is not enough. Please enter a sufficient amount.");
                                }
                            } catch (NumberFormatException e) {
                                // Handle if the user enters an invalid amount
                                JOptionPane.showMessageDialog(null, "Invalid amount entered. Please enter a valid number.");
                            }
                        }
                    } else {
                        // For other payment methods, display a simple confirmation message
                        JOptionPane.showMessageDialog(null, "Order confirmed!\nAddress: " + address + "\nPayment Method: " + selectedPayment);
                    }
                } else {
                    // User canceled payment selection
                    JOptionPane.showMessageDialog(null, "Order canceled.");
                }
            } else {
                // User canceled entering the address
                JOptionPane.showMessageDialog(null, "Order canceled.");
            }
        } else {
            // User canceled the order
            JOptionPane.showMessageDialog(null, "Order canceled.");
        }
    }//GEN-LAST:event_chocoCakeActionPerformed

    private void blackCoffeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackCoffeeActionPerformed
        // TODO add your handling code here:

        int answer;
        answer = JOptionPane.showConfirmDialog(null, "Black Coffee costs 1$ \n\n\t\t\t\t\t\tConfirm?", "ANIMO Barista", JOptionPane.YES_NO_OPTION);
        if (answer == JOptionPane.YES_OPTION) {
            // User confirmed the order, show address and payment options
            String address = JOptionPane.showInputDialog(null, "Enter your address:");

            // Check if the user entered an address
            if (address != null && !address.isEmpty()) {
                // User entered an address, now show payment options
                String[] paymentOptions = {"Cash on Delivery", "GCash"};
                String selectedPayment = (String) JOptionPane.showInputDialog(null, "Choose payment method:", "Payment Options", JOptionPane.QUESTION_MESSAGE, null, paymentOptions, paymentOptions[0]);

                // Process the selected payment method
                if (selectedPayment != null) {
                    if ("GCash".equals(selectedPayment)) {
                        // For GCash payment, ask for contact number and amount
                        String contactNumber = JOptionPane.showInputDialog(null, "Enter your contact number:");

                        // Check if the user pressed cancel
                        if (contactNumber == null) {
                            JOptionPane.showMessageDialog(null, "Order canceled.");
                            return;  // Exit the method or return to the main loop
                        }

                        double productPrice = 1; // Set product price
                        double amountToPay = 0;

                        while (true) {
                            try {
                                amountToPay = Double.parseDouble(JOptionPane.showInputDialog(null, "Enter the amount to pay:"));

                                // Check if the entered amount is sufficient
                                if (amountToPay == productPrice) {
                                    // Display the paid amount in the final output
                                    JOptionPane.showMessageDialog(null, "Order confirmed!\nAddress: " + address + "\nPayment Method: " + selectedPayment + "\nContact Number: " + contactNumber + "\nAmount Paid: $" + amountToPay);
                                    break;
                                } else if (amountToPay > productPrice) {
                                    JOptionPane.showMessageDialog(null, "Amount entered exceeds " + productPrice + "$");
                                } else {
                                    // Prompt that the amount is not enough
                                    JOptionPane.showMessageDialog(null, "Amount entered is not enough. Please enter a sufficient amount.");
                                }
                            } catch (NumberFormatException e) {
                                // Handle if the user enters an invalid amount
                                JOptionPane.showMessageDialog(null, "Invalid amount entered. Please enter a valid number.");
                            }
                        }
                    } else {
                        // For other payment methods, display a simple confirmation message
                        JOptionPane.showMessageDialog(null, "Order confirmed!\nAddress: " + address + "\nPayment Method: " + selectedPayment);
                    }
                } else {
                    // User canceled payment selection
                    JOptionPane.showMessageDialog(null, "Order canceled.");
                }
            } else {
                // User canceled entering the address
                JOptionPane.showMessageDialog(null, "Order canceled.");
            }
        } else {
            // User canceled the order
            JOptionPane.showMessageDialog(null, "Order canceled.");
        }

    }//GEN-LAST:event_blackCoffeeActionPerformed

    private void mochaFrappeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mochaFrappeActionPerformed
        // TODO add your handling code here:

        int answer;
        answer = JOptionPane.showConfirmDialog(null, "Mocha Frappe costs 4.99$ \n\n\t\t\t\t\t\tConfirm?", "ANIMO Barista", JOptionPane.YES_NO_OPTION);
        if (answer == JOptionPane.YES_OPTION) {
            // User confirmed the order, show address and payment options
            String address = JOptionPane.showInputDialog(null, "Enter your address:");

            // Check if the user entered an address
            if (address != null && !address.isEmpty()) {
                // User entered an address, now show payment options
                String[] paymentOptions = {"Cash on Delivery", "GCash"};
                String selectedPayment = (String) JOptionPane.showInputDialog(null, "Choose payment method:", "Payment Options", JOptionPane.QUESTION_MESSAGE, null, paymentOptions, paymentOptions[0]);

                // Process the selected payment method
                if (selectedPayment != null) {
                    if ("GCash".equals(selectedPayment)) {
                        // For GCash payment, ask for contact number and amount
                        String contactNumber = JOptionPane.showInputDialog(null, "Enter your contact number:");

                        // Check if the user pressed cancel
                        if (contactNumber == null) {
                            JOptionPane.showMessageDialog(null, "Order canceled.");
                            return;  // Exit the method or return to the main loop
                        }

                        double productPrice = 4.99; // Set product price
                        double amountToPay = 0;

                        while (true) {
                            try {
                                amountToPay = Double.parseDouble(JOptionPane.showInputDialog(null, "Enter the amount to pay:"));

                                // Check if the entered amount is sufficient
                                if (amountToPay == productPrice) {
                                    // Display the paid amount in the final output
                                    JOptionPane.showMessageDialog(null, "Order confirmed!\nAddress: " + address + "\nPayment Method: " + selectedPayment + "\nContact Number: " + contactNumber + "\nAmount Paid: $" + amountToPay);
                                    break;
                                } else if (amountToPay > productPrice) {
                                    JOptionPane.showMessageDialog(null, "Amount entered exceeds " + productPrice + "$");
                                } else {
                                    // Prompt that the amount is not enough
                                    JOptionPane.showMessageDialog(null, "Amount entered is not enough. Please enter a sufficient amount.");
                                }
                            } catch (NumberFormatException e) {
                                // Handle if the user enters an invalid amount
                                JOptionPane.showMessageDialog(null, "Invalid amount entered. Please enter a valid number.");
                            }
                        }
                    } else {
                        // For other payment methods, display a simple confirmation message
                        JOptionPane.showMessageDialog(null, "Order confirmed!\nAddress: " + address + "\nPayment Method: " + selectedPayment);
                    }
                } else {
                    // User canceled payment selection
                    JOptionPane.showMessageDialog(null, "Order canceled.");
                }
            } else {
                // User canceled entering the address
                JOptionPane.showMessageDialog(null, "Order canceled.");
            }
        } else {
            // User canceled the order
            JOptionPane.showMessageDialog(null, "Order canceled.");
        }

    }//GEN-LAST:event_mochaFrappeActionPerformed

    private void hotLatteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hotLatteActionPerformed
        // TODO add your handling code here:

        int answer;
        answer = JOptionPane.showConfirmDialog(null, "Hot Latte costs 2.99$ \n\n\t\t\t\t\t\tConfirm?", "ANIMO Barista", JOptionPane.YES_NO_OPTION);
        if (answer == JOptionPane.YES_OPTION) {
            // User confirmed the order, show address and payment options
            String address = JOptionPane.showInputDialog(null, "Enter your address:");

            // Check if the user entered an address
            if (address != null && !address.isEmpty()) {
                // User entered an address, now show payment options
                String[] paymentOptions = {"Cash on Delivery", "GCash"};
                String selectedPayment = (String) JOptionPane.showInputDialog(null, "Choose payment method:", "Payment Options", JOptionPane.QUESTION_MESSAGE, null, paymentOptions, paymentOptions[0]);

                // Process the selected payment method
                if (selectedPayment != null) {
                    if ("GCash".equals(selectedPayment)) {
                        // For GCash payment, ask for contact number and amount
                        String contactNumber = JOptionPane.showInputDialog(null, "Enter your contact number:");

                        // Check if the user pressed cancel
                        if (contactNumber == null) {
                            JOptionPane.showMessageDialog(null, "Order canceled.");
                            return;  // Exit the method or return to the main loop
                        }

                        double productPrice = 2.99; // Set product price
                        double amountToPay = 0;

                        while (true) {
                            try {
                                amountToPay = Double.parseDouble(JOptionPane.showInputDialog(null, "Enter the amount to pay:"));

                                // Check if the entered amount is sufficient
                                if (amountToPay == productPrice) {
                                    // Display the paid amount in the final output
                                    JOptionPane.showMessageDialog(null, "Order confirmed!\nAddress: " + address + "\nPayment Method: " + selectedPayment + "\nContact Number: " + contactNumber + "\nAmount Paid: $" + amountToPay);
                                    break;
                                } else if (amountToPay > productPrice) {
                                    JOptionPane.showMessageDialog(null, "Amount entered exceeds " + productPrice + "$");
                                } else {
                                    // Prompt that the amount is not enough
                                    JOptionPane.showMessageDialog(null, "Amount entered is not enough. Please enter a sufficient amount.");
                                }
                            } catch (NumberFormatException e) {
                                // Handle if the user enters an invalid amount
                                JOptionPane.showMessageDialog(null, "Invalid amount entered. Please enter a valid number.");
                            }
                        }
                    } else {
                        // For other payment methods, display a simple confirmation message
                        JOptionPane.showMessageDialog(null, "Order confirmed!\nAddress: " + address + "\nPayment Method: " + selectedPayment);
                    }
                } else {
                    // User canceled payment selection
                    JOptionPane.showMessageDialog(null, "Order canceled.");
                }
            } else {
                // User canceled entering the address
                JOptionPane.showMessageDialog(null, "Order canceled.");
            }
        } else {
            // User canceled the order
            JOptionPane.showMessageDialog(null, "Order canceled.");
        }

    }//GEN-LAST:event_hotLatteActionPerformed

    private void signOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signOutActionPerformed
        // TODO add your handling code here:

        int answer;
        answer = JOptionPane.showConfirmDialog(null, "Are you sure you want to logout?", "System Message", JOptionPane.YES_NO_OPTION);
        if (answer == JOptionPane.YES_NO_OPTION){

            Login lg = new Login();
            lg.setVisible(true);
            setVisible(false);

            JOptionPane.showMessageDialog(null, "Logged Out Successfully!");

        }
    }//GEN-LAST:event_signOutActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:

        int answer;
        answer = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete your account?", "System Message", JOptionPane.YES_NO_OPTION);
        if (answer == JOptionPane.YES_OPTION) {
            // Check if any of the required fields is empty
            if (textUsername.getText().isEmpty() || textFName.getText().isEmpty() || textLName.getText().isEmpty()
                    || textAddress.getText().isEmpty() || textContactNumber.getText().isEmpty()
                    || textEmailAddress.getText().isEmpty() || textPassword.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please use the search button first before deleting an account", "System Message", JOptionPane.WARNING_MESSAGE);
            } else {
                try {
                    Connection cn;
                    Statement st;
                    String url;

                    url = "jdbc:mysql://localhost:3306/projdb";
                    cn = (Connection) DriverManager.getConnection(url, "root", "VahnRasiel505");
                    st = (Statement) cn.createStatement();

                    st.executeUpdate("UPDATE reg_tbl SET username= '" + textUsername.getText() +
                            "',fname= '" + textFName.getText() +
                            "',lname= '" + textLName.getText() +
                            "', address= '" + textAddress.getText() +
                            "',mobileno= '" + textContactNumber.getText() +
                            "',email = '" + textEmailAddress.getText() +
                            "',password = '" + textPassword.getText() +
                            "'Where id = '" + searchId.getText() + "' ");

                    String query;
                    query = "DELETE FROM reg_tbl WHERE Id='" + searchId.getText() + "'";
                    st.executeUpdate(query);
                    JOptionPane.showMessageDialog(null, "Account Deleted", "System Message", JOptionPane.INFORMATION_MESSAGE);
                    textUsername.setText("");
                    textFName.setText("");
                    textLName.setText("");
                    textAddress.setText("");
                    textContactNumber.setText("");
                    textEmailAddress.setText("");
                    textPassword.setText("");

                } catch (SQLException ex) {
                    // Handle SQLException
                }
            }
}


    }//GEN-LAST:event_deleteButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        int answer;
        answer = JOptionPane.showConfirmDialog(null, "Are you sure you want to update this account?", "System Message", JOptionPane.YES_NO_OPTION);

        if (answer == JOptionPane.YES_OPTION) {
            if (updateButton.getText().equals("Update")) {
                // User clicked "Update" button, enable editing
                textUsername.setEnabled(true);
                textFName.setEnabled(true);
                textLName.setEnabled(true);
                textAddress.setEnabled(true);
                textContactNumber.setEnabled(true);
                textEmailAddress.setEnabled(true);
                textPassword.setEnabled(true);
                textConfirmPassword.setEnabled(true);

                updateButton.setText("Save");
                deleteButton.setEnabled(false);
                signOut.setEnabled(false);
            } else if (updateButton.getText().equals("Save")) {
                // User clicked "Save" button, save changes
                try {
                    Connection cn;
                    Statement st;
                    String url;
                    url = "jdbc:mysql://localhost:3306/projdb";
                    Class.forName("com.mysql.cj.jdbc.Driver");
                    cn = (Connection) DriverManager.getConnection(url, "root", "VahnRasiel505");
                    st = (Statement) cn.createStatement();

                    // Check if password and confirm password match
                    String password = textPassword.getText();
                    String confirmPassword = textConfirmPassword.getText();

                    if (!password.equals(confirmPassword)) {
                        JOptionPane.showMessageDialog(null, "Password and Confirm Password do not match", "Error", JOptionPane.ERROR_MESSAGE);
                        textPassword.setText("password");
                        textConfirmPassword.setText("");
                        return; // Stop further processing
                    }

                    st.executeUpdate("UPDATE reg_tbl SET  username= '" + textUsername.getText() + "',fname= '"
                        + textFName.getText() + "',lname= '"
                        + textLName.getText() + "', address= '"
                        + textAddress.getText() + "',mobileno= '"
                        + textContactNumber.getText() + "',email = '"
                        + textEmailAddress.getText() + "',password='"
                        + password
                        + "' Where Id = '"
                        + searchId.getText() + "' ");
                    JOptionPane.showMessageDialog(null, "Account Updated", "System Message", JOptionPane.INFORMATION_MESSAGE);

                    // Disable editing after saving
                    textUsername.setEnabled(false);
                    textFName.setEnabled(false);
                    textLName.setEnabled(false);
                    textAddress.setEnabled(false);
                    textContactNumber.setEnabled(false);
                    textEmailAddress.setEnabled(false);
                    textPassword.setEnabled(false);
                    textConfirmPassword.setEnabled(false);
                    signOut.setEnabled(true);

                    // Clear fields
                    textUsername.setText("");
                    textFName.setText("");
                    textLName.setText("");
                    textAddress.setText("");
                    textContactNumber.setText("");
                    textEmailAddress.setText("");
                    textPassword.setText("");
                    textConfirmPassword.setText("");

                    updateButton.setText("Update");
                    deleteButton.setEnabled(true);

                } catch (ClassNotFoundException | SQLException ex) {
                    // Handle Exceptions
                }
            }
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        try {
           // Check if there are any existing accounts in the database
           ResultSet rs2 = con.createStatement().executeQuery("SELECT COUNT(*) FROM reg_tbl");
           rs2.next();
           int count = rs2.getInt(1);

           if (count == 0) {
               int leaveOption = JOptionPane.showConfirmDialog(this, "There are no existing accounts. Do you want to register first?", "System Message", JOptionPane.YES_NO_OPTION);
               if (leaveOption == JOptionPane.YES_OPTION) {
                   // Set Registration File Visible
                   Registration rga = new Registration();
                   rga.setVisible(true);
                   setVisible(false);
               } else {
                   // Terminate program
                   JOptionPane.showMessageDialog(null,"Thank you and Come Again!" );
                   System.exit(0);
               }
           } else {
               // Continue with searching for the account
               pst = con.prepareStatement("select Id, username, fname, lname, address, mobileno, email, password from reg_tbl where Id=? ");
               int id = Integer.parseInt(searchId.getText());
               pst.setInt(1, id);
               ResultSet rs1 = pst.executeQuery();

               if (rs1.next() == false) {
                   JOptionPane.showMessageDialog(this, "Account does not exist");
                   textUsername.setText("");
                   textFName.setText("");
                   textLName.setText("");
                   textAddress.setText("");
                   textContactNumber.setText("");
                   textEmailAddress.setText("");
                   textPassword.setText("");
                   updateButton.setEnabled(false);
                   searchId.requestFocus();
               } else {
                   textUsername.setText(rs1.getString("username"));

                   if (rs1.getString("fname") == null || rs1.getString("fname").trim().isEmpty()) {
                       textFName.setText("N/A");
                   } else {
                       textFName.setText(rs1.getString("fname"));
                   }

                   if (rs1.getString("lname") == null || rs1.getString("lname").trim().isEmpty()) {
                       textLName.setText("N/A");
                   } else {
                       textLName.setText(rs1.getString("lname"));
                   }

                   if (rs1.getString("address") == null || rs1.getString("address").trim().isEmpty()) {
                       textAddress.setText("N/A");
                   } else {
                       textAddress.setText(rs1.getString("address"));
                   }

                   if (rs1.getString("mobileno") == null || rs1.getString("mobileno").trim().isEmpty()) {
                       textContactNumber.setText("N/A");
                   } else {
                       textContactNumber.setText(rs1.getString("mobileno"));
                   }

                   textEmailAddress.setText(rs1.getString("email"));
                   textPassword.setText(rs1.getString("password"));
                   updateButton.setEnabled(true);
               }
           }
       } catch (SQLException ex) {
           // Handle exceptions
       }



    }//GEN-LAST:event_searchButtonActionPerformed

    
        public void Connect()
    {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/projdb","root","VahnRasiel505");
            
        } catch (ClassNotFoundException ex) {
          
        } catch (SQLException ex) {
          
        }
    }
    
    
    
 

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
            try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton blackCoffee;
    private javax.swing.JButton chocoCake;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton hotLatte;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton mochaFrappe;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchId;
    private javax.swing.JButton signOut;
    private javax.swing.JTextField textAddress;
    private javax.swing.JPasswordField textConfirmPassword;
    private javax.swing.JTextField textContactNumber;
    private javax.swing.JTextField textEmailAddress;
    private javax.swing.JTextField textFName;
    private javax.swing.JTextField textLName;
    private javax.swing.JPasswordField textPassword;
    private javax.swing.JTextField textUsername;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
